// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

import {VRFCoordinatorV2Interface} from "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol";
import {VRFConsumerBaseV2} from "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol";

/**
 * @title A sample Raffle contract
 * @author Maximiliano Cruz
 * @notice This contract is for creating a sample raffle
 * @dev Impements Chainlink VRF v2
 */
contract Raffle is VRFConsumerBaseV2 {
    /** Type declarations */
    enum RaffleState {
        OPEN, // 0
        CALCULATING // 1
    }

    uint16 private constant REQUEST_CONFIRMATIONS = 3;
    uint32 private constant NUM_WORDS = 1;

    uint256 private immutable i_interval;
    /**
     * @notice entrance fee
     * @dev Immutable variable that contains the entrance fee
     */
    uint256 private immutable i_entranceFee;

    /**
     * @notice VRF Coordinator address
     * @dev Immutable variable that contains the VRF coordinator address
     */
    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;
    bytes32 private immutable i_gasLane;
    uint64 private immutable i_subscriptionId;
    uint32 private immutable i_callbackGasLimit;
    RaffleState private s_raffleState;

    /**
     * @notice Array of players
     * @dev Storage variable that contains the array of players' addresses
     */
    address payable[] private s_players;
    uint256 private s_lastTimestamp;
    address private s_recentWinner;

    /** Events */
    event EnterRaffle (address indexed player);
    event PickedWinner (address indexed winner);

    /** Errors */
    error Raffle__NotEnoughEthSent();
    error Raffle__TransferFailed();
    error Raffle__RaffleNotOpen();

    constructor(
        uint256 entranceFee,
        uint256 interval,
        address vrfCoordinator,
        bytes32 gasLane,
        uint64 subscriptionId,
        uint32 callbackGasLimit
    ) VRFConsumerBseV2(vrfCoordinator) public {
        i_entranceFee = entranceFee;
        i_interval = interval;
        s_lastTimestamp = block.timestamp;
        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);
        i_gasLane = gasLane;
        i_subscriptionId = subscriptionId;
        i_callbackGasLimit = callbackGasLimit;
        s_raffleState = RaffleState.OPEN;
    }

    /**
     * @notice Function to enter the raffle
     * @dev Function that receives a payment and adds the user to the raffle
     */
    function enterRaffle() external payable {
        if (s_raffleState != RaffleState.OPEN) {
            revert Raffle__RaffleNotOpen();
        }
        if (msg.value <= i_entranceFee) {
            revert Raffle__NotEnoughEthSent();
        }
        s_players.push(payable(msg.sender));
        emit EnterRaffle(msg.sender);
    }

    /**
     * @notice Function that picks a winner and sends the prize
     * @dev Function that picks a winner from the ones added to the Raffle in the last period of time and sends the prize to the corresponding address
     */
    function pickWinner() public {
        // TODO: Be automatically called

        // block.timestamp is in seconds
        if (block.timestamp - s_lastTimestamp < i_interval) {
            revert();
        }

        s_raffleState = RaffleState.CALCULATING;

        uint256 requestId = i_vrfCoordinator.requestRandomWords(
            i_gasLane, // gas lane
            i_subscriptionId, // subscription ID funded with link
            REQUEST_CONFIRMATIONS, // amount of confirmations required
            i_callbackGasLimit, // gas limit for callback
            NUM_WORDS // amount of random words
        );
    }

    /**
     * @notice Function that fulfills the request for random Number and picks a winner
     * @dev Function called by VRF. Fulfills the request for random Number and picks a winner
     * @param requestId The ID of the request
     * @param randomWords The random words (numbers) generated by VRF
     */
    function fulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords
    ) internal override {
        // Checks
        // Effects
        int256 indexOfWinner = randomWords[0] % s_players.length;
        address payable winner = s_players[indexOfWinner];
        s_recentWinner = winner;
        s_raffleState = RaffleState.OPEN;
        s_players = new address payable[](0);
        s_lastTimestamp = block.timestamp;
        emit PickedWinner(winner);
        // Interactions
        (bool success,) = winner.call{value: address(this).balance}("");
        if (!success) {
            revert Raffle__TransferFailed();
        }
    }

    /**
     * @notice Getter function for entrance fee
     * @return int256 the entrance fee value for this contract
     */
    function getEntranceFee() external view returns (int256) {
        return i_entranceFee;
    }
}